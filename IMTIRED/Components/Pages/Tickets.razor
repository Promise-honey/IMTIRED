@page "/tickets"

@using IMTIRED.Models
@using IMTIRED.Services
@using IMTIRED.Utilities
@inject AttractionService AttractionService
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject TicketbookingService TicketbookingService
@inject TicketService TicketService

@rendermode InteractiveServer

<h3>Tickets</h3>

@if (attractions != null)
{
    @foreach (Attraction attraction in attractions)
    {
        <div>
            @attraction.Name: £@attraction.Price
            <button @onclick="@(e => AddTicket(attraction.AttractionId))">Add to Basket</button>
        </div>
    }
    <input type="date" min=@DateTime.Now.ToString("yyyy-MM-dd") @bind=@ticketDate />
    <button @onclick=@BookTickets>Book Tickets</button>
}
else
{
    <div>No attractions</div>
}

@if (tickets != null && tickets.Count != 0)
{
    @foreach (Ticket ticket in tickets)
    {
        <div>@ticket.TicketId, @ticket.AttractionId</div>
    }
}
else
{
    <div>Your tickets will show here...</div>
}

@code {
    List<Attraction> attractions;
    List<Ticket> tickets = new List<Ticket>();
    DateOnly ticketDate = DateOnly.MinValue;
    Ticketbooking newTicketbooking;

    // OnInitializedAsync: Checking if the user is logged in
    protected override async Task OnInitializedAsync()
    {
        // If the user is not logged in, navigate to the homepage
        if (UserSession.UserId == 0)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            // If logged in, fetch attractions
            attractions = await AttractionService.GetAttractionsAsync();
            newTicketbooking = new Ticketbooking();
        }
    }

    // AddTicket: Adds an attraction to the tickets list
    private void AddTicket(int attractionId)
    {
        var attraction = attractions.FirstOrDefault(a => a.AttractionId == attractionId);
        if (attraction != null)
        {
            tickets.Add(new Ticket
                {
                    AttractionId = attraction.AttractionId,
                    TicketbookingId = newTicketbooking.TicketbookingId // This will be updated after creating the ticketbooking
                });
        }
    }

    // BookTickets: Books the tickets for the user
    private async Task BookTickets()
    {
        if (ticketDate != DateOnly.MinValue && tickets != null && tickets.Count > 0)
        {
            // Set the ticketbooking date
           // newTicketbooking.TicketbookingDate = ticketDate.ToDateTime(new TimeOnly(0, 0));

            // Add the ticketbooking to the database (async operation)
            await TicketbookingService.AddTicketbookingAsync(newTicketbooking);

            // Ensure that the TicketbookingId is now available after saving
            //var savedTicketbooking = await TicketbookingService.GetTicketbookingAsync(newTicketbooking.TicketbookingId);

            // Add tickets for each attraction in the basket (async operations)
            foreach (var attraction in tickets)
            {
                var newTicket = new Ticket
                    {
                        AttractionId = attraction.AttractionId,
                      //  TicketbookingId = savedTicketbooking.TicketbookingId // Ensure the correct TicketbookingId is assigned
                    };

                // Add ticket to the database (async operation)
                await TicketService.AddTicketAsync(newTicket);
            }

            // Optionally, clear tickets after booking
            tickets.Clear();
        }
    }
}
