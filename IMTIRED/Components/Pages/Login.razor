@page "/log_in"
@using IMTIRED.Models
@using IMTIRED.Services
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@inject UserSession UserSession

<h3>Log In</h3>

<EditForm Model="newCustomer" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-field">
        <label>Username:</label>
        <InputText @bind-Value="newCustomer.Username" />
    </div>

    <div class="form-field">
        <label>Password:</label>
        <InputText @bind-Value="password" type="password" />
    </div>

    <div class="form-field">
        <label>
            <InputCheckbox @bind-Value="rememberMe" />
            Remember Me
        </label>
    </div>

    <div class="form-field">
        <button type="submit">Log In</button>
    </div>

    <div class="form-field">
        <a href="/modify?username=@newCustomer.Username">Forgot Password?</a>
    </div>

    <div class="form-field">
        <a href="/register">New User? Register here</a>
    </div>
</EditForm>

@code {
    private Customer newCustomer = new Customer();
    private string password;
    private bool rememberMe;

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(newCustomer.Username) && !string.IsNullOrEmpty(password))
        {
            var loggedInCustomer = await CustomerService.LogIn(newCustomer);

            if (loggedInCustomer == null)
            {
                Console.WriteLine("Invalid login attempt.");
            }
            else
            {
                // Store logged-in customer details
                UserSession.UserId = loggedInCustomer.CustomerId; // Save user session information

                // Optionally, store the username in a cookie if 'Remember Me' is checked
                if (rememberMe)
                {
                    var options = new CookieOptions
                        {
                            Expires = DateTime.Now.AddDays(30),
                            HttpOnly = true,
                            Secure = true
                        };
                    // Example: Cookie.Set("user", loggedInCustomer.Username, options);
                }

                // Redirect user to their personalized home page
                NavigationManager.NavigateTo($"/home/{loggedInCustomer.Username}");
            }
        }
        else
        {
            Console.WriteLine("Please enter valid login details.");
        }
    }
}

<style>
    /* Styling for the form */
    form {
        margin-top: 3rem; /* Adds space above the form */
    }

    .form-field {
        margin-bottom: 1rem; /* Adds space between form fields */
    }

    h3 {
        margin-top: 1rem; /* Adds space above the heading */
    }

    button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        font-size: 1rem;
        border-radius: 5px;
    }

        button:hover {
            background-color: #0056b3;
        }

    a {
        color: #007bff;
        text-decoration: none;
    }

        a:hover {
            text-decoration: underline;
        }
</style>
